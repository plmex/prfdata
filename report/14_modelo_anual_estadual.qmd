---
title: "Modelo Preditivo Estadual de Óbitos no Trânsito"
format: html
editor: visual
toc: true
---

## Descrição

O modelo estadual em questão é baseado em uma regressão linear em resolução mensal, ajustado a partir das variáveis:

-   Frota (veículos totais, motocicletas e automóveis - RENAVAM);

-   Acidentes totais, acidentes fatais e feridos em rodovias federais (PRF);

-   Óbitos em trânsito (variável dependente - DataSUS).

Os pacotes utilizados foram:

```{r}
#| warning: false
#| output: false

library(tidyverse)
library(tidymodels)
library(onsvplot)
library(here)
library(roadtrafficdeaths)
library(fleetbr)
library(arrow)
library(geofacet)
library(knitr)

options(scipen = 999)
theme_set(theme_onsv())
```

```{r}
#| include: false

brazil_states_acronym <- function(df) {
  brazil_states_df <- data.frame(
    State = c(
      "Acre", "Alagoas", "Amapá", "Amazonas", "Bahia", "Ceará", "Distrito Federal",
      "Espírito Santo", "Goiás", "Maranhão", "Mato Grosso", "Mato Grosso do Sul",
      "Minas Gerais", "Pará", "Paraíba", "Paraná", "Pernambuco", "Piauí",
      "Rio de Janeiro", "Rio Grande do Norte", "Rio Grande do Sul", "Rondônia", "Roraima",
      "Santa Catarina", "São Paulo", "Sergipe", "Tocantins"
    ),
    Acronym = c(
      "AC", "AL", "AP", "AM", "BA", "CE", "DF", "ES", "GO", "MA", "MT", "MS", "MG",
      "PA", "PB", "PR", "PE", "PI", "RJ", "RN", "RS", "RO", "RR", "SC", "SP", "SE", "TO"
    )
  )
  
  for(i in 1:length(df$uf)) {
    for(j in 1:length(brazil_states_df$State)) {
      if(df$uf[i] == brazil_states_df$State[j] & !is.na(df$uf[i])) {
        df$uf[i] <- brazil_states_df$Acronym[j]
      }
    }
  }
  
  return(df)
}

get_region <- function(acronyms) {
  region_map <- list(
    "Norte" = c("AC", "AM", "AP", "PA", "RO", "RR", "TO"),
    "Nordeste" = c("AL", "BA", "CE", "MA", "PB", "PE", "PI", "RN", "SE"),
    "Centro-Oeste" = c("GO", "MT", "MS", "DF"),
    "Sudeste" = c("ES", "MG", "RJ", "SP"),
    "Sul" = c("PR", "RS", "SC")
  )
  
  region <- sapply(acronyms, function(acronym) {
    for (r in names(region_map)) {
      if (acronym %in% region_map[[r]]) {
        return(r)
      }
    }
    return("Not found")
  })
  
  return(region)
}

fit_models <- function(df) {
  for(i in seq_along(df$model)) {
    df$fit[[i]] <- fit(df$model[[i]], df$training[[i]])
  }
  return(df)
}

predict_models <- function(df,testing_col) {
  for(i in seq_along(df$model)) {
    df$pred[[i]] <- bind_cols(
      df[[testing_col]][[i]],
      predict(df$fit[[i]],df[[testing_col]][[i]]),
      predict(df$fit[[i]],df[[testing_col]][[i]], type = "conf_int")
    )
  }
  return(df)
}

get_plot <- function(df) {
  df |> 
  ggplot(aes(data)) +
    geom_ribbon(aes(ymax = .pred_upper, ymin = .pred_lower), 
                alpha = 0.25) +
    geom_line(aes(y = mortes, color = "Óbitos reais")) +
    geom_line(aes(y = .pred, color = "Óbitos previstos")) +
    labs(x = NULL, y = NULL) +
    scale_color_manual(values = c(
      "Óbitos reais" = onsv_palette$yellow,
      "Óbitos previstos" = onsv_palette$blue
    )) +
    scale_y_continuous(labels = comma_format(big.mark = ".",
                                             decimal.mark = ",")) +
    facet_wrap(vars(uf), ncol = 3)
}

get_metrics <- function(df) {
  res <- df |> 
    summarise(
      .by = uf,
      RMSE = rmse_vec(mortes, .pred),
      MAE = mae_vec(mortes, .pred),
      RSQ = rsq_vec(mortes, .pred)
    )
  
  res <- bind_cols(res, `Média` = rowMeans(select(res, RMSE, MAE, RSQ)))
  
  return(kable(res))
}
```

```{r}
#| include: false

# frota
df_frota <- fleetbr |> 
  pivot_wider(names_from = modal, values_from = frota) |> 
  mutate(data = ym(paste0(ano, "-", mes)),
         automovel = AUTOMOVEL + CAMINHONETE + CAMIONETA + UTILITARIO,
         motocicleta = MOTOCICLETA + CICLOMOTOR + MOTONETA,
         total = TOTAL) |> 
  summarise(
    .by = c(data, uf),
    automovel = sum(automovel),
    motocicleta = sum(motocicleta),
    veiculos = sum(total)
  )

# prf
url <- "https://github.com/ONSV/prfdata/releases/download/v0.2.0/prf_sinistros.zip"

temp_file <- tempfile()
temp_dir <- tempdir()

download.file(url, temp_file, quiet = T)
unzip(temp_file, exdir = temp_dir)

df_prf <- open_dataset(file.path(temp_dir,"prf_sinistros")) |> 
  mutate(
    mes = month(data_inversa),
    acidentes_fatais = if_else(
      classificacao_acidente == "Com Vítimas Fatais",
      1, 0, missing = 0
    )
  ) |> 
  summarise(
    .by = c(mes, ano, uf),
    acidentes = n(),
    acidentes_fatais = sum(acidentes_fatais),
    feridos = sum(feridos),
    mortes_prf = sum(mortos)
  ) |> 
  arrange(mes, ano) |>
  mutate(data = ym(paste0(ano, "-", mes))) |> 
  select(-c(mes, ano)) |> 
  collect()

unlink(temp_file)

# mortes
df_mortes <- rtdeaths |> 
  mutate(mes_ocorrencia = month(data_ocorrencia)) |>
  count(mes_ocorrencia, ano_ocorrencia, nome_uf_ocor) |> 
  arrange(ano_ocorrencia) |> 
  rename(
    mortes = n,
    mes = mes_ocorrencia,
    ano = ano_ocorrencia,
    uf = nome_uf_ocor
  ) |> 
  brazil_states_acronym() |> 
  mutate(data = ym(paste0(ano, "-", mes))) |> 
  select(c(uf, mortes, data))

dados_mensais_uf <- reduce(
  list(df_frota, df_prf, df_mortes),
  inner_join,
  by = c("data", "uf")
)
```

```{r}
#| include: false

dados_mensais_brasil <-
  dados_mensais_uf |> 
  select(-uf) |> 
  group_by(data) |> 
  summarise_all(.funs = sum)

dados_mensais_brasil
```

## Dados

Os dados foram pré-processados e organizados de forma que um modelo fosse ajustado isoladamente para cada estado, gerando uma lista de *workflows* (do pacote `{workflows}`) treinados para atender especificamente uma única unidade federativa:

```{r}
#| echo: false
#| warning: false

rmarkdown::paged_table(dados_mensais_uf)
```

```{r}
#| include: false

nest_estados <-
  dados_mensais_uf |> 
  nest(.by = "uf") |> 
  bind_rows(list(
    uf = "Brasil",
    data =  list(dados_mensais_brasil)
  ))

nest_estados
```

```{r}
#| echo: false

set.seed(123)

rec <-
  dados_mensais_uf |> 
  select(-uf) |> 
  recipe(mortes ~ .) |> 
  remove_role(c(mortes_prf, data), old_role = "predictor") |> 
  step_normalize(all_numeric_predictors())

model <- 
  linear_reg() |> 
  set_engine("lm")
```

## Modelagem

Sendo cada modelo equivalente à um estado, a tabela a seguir destaca todos as etapas e objetos intermediários da construção dos modelos:

```{r}
#| warning: false
#| echo: false

modelos_estaduais <-
  nest_estados |> 
  mutate(
    splits = map(data, initial_split, prop = 0.8),
    training = map(splits, training),
    testing = map(splits, testing),
    model = list(workflow()) |> 
      map(add_recipe, recipe = rec) |> 
      map(add_model, spec = model)
  ) |> 
  fit_models() |> 
  predict_models("testing") |> 
  rename(pred_test = pred) |> 
  predict_models("data") |> 
  rename(pred_anual = pred) |> 
  mutate(region = get_region(uf)) |> 
  relocate(region)

rmarkdown::paged_table(modelos_estaduais)
```

```{r}
#| include: false

norte <- modelos_estaduais |> 
  filter(region == "Norte") |> 
  select(uf, pred_anual) |> 
  unnest(cols = c(pred_anual))

nordeste <- modelos_estaduais |> 
  filter(region == "Nordeste") |> 
  select(uf, pred_anual) |> 
  unnest(cols = c(pred_anual))

centroeste <- modelos_estaduais |> 
  filter(region == "Centro-Oeste") |> 
  select(uf, pred_anual) |> 
  unnest(cols = c(pred_anual))

sudeste <- modelos_estaduais |> 
  filter(region == "Sudeste") |> 
  select(uf, pred_anual) |> 
  unnest(cols = c(pred_anual))
  
sul <- modelos_estaduais |> 
  filter(region == "Sul") |> 
  select(uf, pred_anual) |> 
  unnest(cols = c(pred_anual))

brasil <- modelos_estaduais |> 
  filter(region == "Not found") |> 
  select(uf, pred_anual) |> 
  unnest(cols = c(pred_anual))
```


```{r}
#| include: false

norte_test <- modelos_estaduais |> 
  filter(region == "Norte") |> 
  select(uf, pred_test) |> 
  unnest(cols = c(pred_test))

nordeste_test <- modelos_estaduais |> 
  filter(region == "Nordeste") |> 
  select(uf, pred_test) |> 
  unnest(cols = c(pred_test))

centroeste_test <- modelos_estaduais |> 
  filter(region == "Centro-Oeste") |> 
  select(uf, pred_test) |> 
  unnest(cols = c(pred_test))

sudeste_test <- modelos_estaduais |> 
  filter(region == "Sudeste") |> 
  select(uf, pred_test) |> 
  unnest(cols = c(pred_test))
  
sul_test <- modelos_estaduais |> 
  filter(region == "Sul") |> 
  select(uf, pred_test) |> 
  unnest(cols = c(pred_test))

brasil_test <- modelos_estaduais |> 
  filter(region == "Not found") |> 
  select(uf, pred_test) |> 
  unnest(cols = c(pred_test))
```

## Resultados

Os resultados são demonstrados no painel e mapa a seguir, segregados por região:

::: panel-tabset
## Norte

```{r}
#| echo: false
#| warning: false

get_plot(norte)
get_metrics(norte)
```

## Nordeste

```{r}
#| echo: false
#| warning: false

get_plot(nordeste)
get_metrics(nordeste_test)
```

## Centro-Oeste

```{r}
#| echo: false
#| warning: false

get_plot(centroeste)
get_metrics(centroeste_test)
```

## Sul

```{r}
#| echo: false
#| warning: false

get_plot(sul)
get_metrics(sul_test)
```

## Sudeste

```{r}
#| echo: false
#| warning: false

get_plot(sudeste)
get_metrics(sudeste_test)
```

## Brasil

```{r}
#| echo: false
#| warning: false

get_plot(brasil)
get_metrics(brasil_test)
```
:::

```{r}
#| fig.height: 7
#| warning: false
#| echo: false

modelos_estaduais |>  
  select(uf, pred_anual) |> 
  unnest(cols = c(pred_anual)) |> 
  select(uf, data, mortes, .pred, .pred_upper, .pred_lower) |> 
  ggplot(aes(data)) +
    geom_ribbon(aes(ymax = .pred_upper, ymin = .pred_lower), alpha = 0.25) +
    geom_line(aes(y = mortes, color = "Óbitos reais")) +
    geom_line(aes(y = .pred, color = "Óbitos previstos")) +
    labs(x = NULL, y = NULL) +
    scale_color_manual(values = c(
      "Óbitos reais" = onsv_palette$yellow,
      "Óbitos previstos" = onsv_palette$blue
    )) +
    scale_y_continuous(labels = comma_format(big.mark = ".", 
                                             decimal.mark = ",")) +
    theme(axis.text.x = element_text(angle = 90)) +
    facet_geo(~ uf, grid = "br_states_grid2", scales = "free_y")
```
