---
title: "Análise e Teste de Modelos"
format: 
  html:
    toc: true
    toc-depth: 3
editor: visual
---

Testar diferentes métodos de regressão e técnicas de pré-processamento para melhorar o desempenho do modelo final

## Setup e Importação

```{r}
library(tidyverse)
library(tidymodels)
library(here)
library(knitr)
library(onsvplot)
library(car)
tidymodels_prefer()
options(scipen = 999)
```

```{r}
load(here("data","tabela_total.rda"))
```

## Análise das métricas e p-valores

O script calcula RMSE, MAE, R2 e p-valores para modelos lineares simples afim de demonstrar quais variáveis têm maior grau de influência sobre as mortes

```{r}
df_total_sem_taxa <- df_total |> select(-mortos_por_pop)

modelo <- linear_reg() |> set_engine("lm")

metricas <- metric_set(rmse, mae, rsq)

for (i in colnames(df_total_sem_taxa)[-5]){
  
  rec <- df_total_sem_taxa |>
    recipe(vars = c("mortes", i), roles = c("outcome", "predictor")) |>
    step_naomit(all_numeric()) |>
    step_normalize(all_numeric_predictors())

  wflow_fit <- workflow() |>
    add_model(modelo) |>
    add_recipe(rec) |>
    fit(df_total)

  if (i == "ano") {
    pvalores <- wflow_fit |> 
      tidy() |> 
      mutate(.metric = "pvalor", variavel = i) |> 
      rename(valor = p.value)
  } else {
    pvalores <- rbind(
      pvalores,
      wflow_fit |> 
        tidy() |> 
        mutate(.metric = "pvalor", variavel = i) |> 
        rename(valor = p.value)
    )
  }
  
  predicao <- wflow_fit |> 
    predict(df_total) |>
    cbind(df_total)
    
  medidas <- predicao |> 
    metricas(.pred, mortes) |> 
    mutate(variavel = i)
  
  if (i == "ano") {
    erros <- medidas
  } else {
    erros <- rbind(erros, medidas)
  }
  
}

erros_pivot <- erros |> 
  select(!.estimator) |> 
  rename(valor = .estimate)

pvalores <- pvalores |> 
  arrange(valor) |> 
  filter(term != "(Intercept)") |> 
  select(.metric, valor, variavel)

df_metricas <- rbind(erros_pivot, pvalores) |> 
  group_by(.metric) |> 
  arrange(valor, .by_group = TRUE)

df_metricas |>
  ggplot(aes(x = valor, y = variavel)) +
    facet_wrap(vars(.metric), scales = "free_x") +
    geom_bar(stat = "identity", fill = "lightblue", color = "blue")
```

## Multicolinearidade

```{r}
vif_modelo <- lm(
  mortes ~
    quilometragem_10_bilhoes +
    qnt_mortos +
    qnt_feridos +
    qnt_acidentes +
    populacao +
    pib +
    motocicleta +
    condutores +
    automovel,
  data = df_total |> drop_na()
)

summary(vif_modelo)
```

```{r}
vif(vif_modelo) |> kable()
```

```{r}
vif(vif_modelo) |> 
  barplot(
    main = "Valores VIF",
    horiz = TRUE
  )
abline(v = 1000, lwd = 3, lty = 2)
```

## Modelos

```{r}
modelo_linear_lm <- linear_reg() |> set_engine("lm")

modelo_randforest <- rand_forest(
  mode = "regression",
  mtry = 3,
  trees = 1000
) |> set_engine("ranger")
```

## Metricas

```{r}
metricas <- metric_set(rmse, mae, rsq)
```

## Regressão Linear Multivariada

### Teste 1

```{r}
receita_1 <- df_total |> 
  recipe(
    mortes ~ qnt_acidentes_fatais
  ) |> 
  step_naomit(all_numeric()) |> 
  step_normalize(all_numeric_predictors())

linear_wflow_1 <- workflow() |> 
  add_recipe(receita_1) |> 
  add_model(modelo_linear_lm) |> 
  fit(df_total)

linear_pred_1 <- linear_wflow_1 |> 
  predict(df_total) |> 
  cbind(df_total)

metricas(linear_pred_1, truth = mortes, estimate = .pred) |> kable()
```

### Teste 2

```{r}
receita_2 <- df_total |> 
  recipe(
    mortes ~ qnt_acidentes_fatais + qnt_acidentes
  ) |> 
  step_naomit(all_numeric()) |> 
  step_normalize(all_numeric_predictors())

linear_wflow_2 <- workflow() |> 
  add_recipe(receita_2) |> 
  add_model(modelo_linear_lm) |> 
  fit(df_total)

linear_pred_2 <- linear_wflow_2 |> 
  predict(df_total) |> 
  cbind(df_total)

metricas(linear_pred_2, truth = mortes, estimate = .pred) |> kable()
```

### Teste 3

```{r}
receita_3 <- df_total |> 
  recipe(
    mortes ~ qnt_acidentes_fatais + qnt_acidentes + qnt_feridos
  ) |> 
  step_naomit(all_numeric()) |> 
  step_normalize(all_numeric_predictors())

linear_wflow_3 <- workflow() |> 
  add_recipe(receita_3) |> 
  add_model(modelo_linear_lm) |> 
  fit(df_total)

linear_pred_3 <- linear_wflow_3 |> 
  predict(df_total) |> 
  cbind(df_total)

metricas(linear_pred_3, truth = mortes, estimate = .pred) |> kable()
```

### Teste 4

```{r}
receita_4 <- df_total |> 
  recipe(
    mortes ~ 
      qnt_acidentes_fatais + 
      qnt_acidentes + 
      qnt_feridos +
      condutores
  ) |> 
  step_naomit(all_numeric()) |> 
  step_normalize(all_numeric_predictors())

linear_wflow_4 <- workflow() |> 
  add_recipe(receita_4) |> 
  add_model(modelo_linear_lm) |> 
  fit(df_total)

linear_pred_4 <- linear_wflow_4 |> 
  predict(df_total) |> 
  cbind(df_total)

metricas(linear_pred_4, truth = mortes, estimate = .pred) |> kable()
```

### Teste 5

```{r}
receita_5 <- df_total |> 
  recipe(
    mortes ~ 
      qnt_acidentes_fatais + 
      qnt_acidentes + 
      qnt_feridos +
      condutores +
      populacao
  ) |> 
  step_naomit(all_numeric()) |> 
  step_normalize(all_numeric_predictors())

linear_wflow_5 <- workflow() |> 
  add_recipe(receita_5) |> 
  add_model(modelo_linear_lm) |> 
  fit(df_total)

linear_pred_5 <- linear_wflow_5 |> 
  predict(df_total) |> 
  cbind(df_total)

metricas(linear_pred_5, truth = mortes, estimate = .pred) |> kable()
```

### Teste 6

```{r}
receita_6<- df_total |> 
  recipe(
    mortes ~ 
      qnt_acidentes_fatais + 
      qnt_acidentes + 
      qnt_feridos +
      condutores +
      populacao +
      veiculos_total
  ) |> 
  step_naomit(all_numeric()) |> 
  step_normalize(all_numeric_predictors())

linear_wflow_6 <- workflow() |> 
  add_recipe(receita_6) |> 
  add_model(modelo_linear_lm) |> 
  fit(df_total)

linear_pred_6 <- linear_wflow_6 |> 
  predict(df_total) |> 
  cbind(df_total)

metricas(linear_pred_6, truth = mortes, estimate = .pred) |> kable()
```

### Teste 7

```{r}
receita_7 <- df_total |> 
  recipe(
    mortes ~ 
      qnt_acidentes_fatais + 
      qnt_acidentes + 
      qnt_feridos +
      condutores +
      populacao +
      veiculos_total +
      pib
  ) |> 
  step_naomit(all_numeric()) |> 
  step_normalize(all_numeric_predictors())

linear_wflow_7 <- workflow() |> 
  add_recipe(receita_7) |> 
  add_model(modelo_linear_lm) |> 
  fit(df_total)

linear_pred_7 <- linear_wflow_7 |> 
  predict(df_total) |> 
  cbind(df_total)

metricas(linear_pred_7, truth = mortes, estimate = .pred) |> kable()
```

## Regressão por Random Forest

### Teste 1

```{r}
rf_wflow_1 <- workflow() |> 
  add_recipe(receita_1) |> 
  add_model(modelo_randforest) |> 
  fit(df_total)

rf_pred_1 <- rf_wflow_1 |> 
  predict(df_total |> drop_na()) |> 
  cbind(df_total |> drop_na())

metricas(rf_pred_1, truth = mortes, estimate = .pred) |> kable()
```

### Teste 2

```{r}
rf_wflow_2 <- workflow() |> 
  add_recipe(receita_2) |> 
  add_model(modelo_randforest) |> 
  fit(df_total)

rf_pred_2 <- rf_wflow_2 |> 
  predict(df_total |> drop_na()) |> 
  cbind(df_total |> drop_na())

metricas(rf_pred_2, truth = mortes, estimate = .pred) |> kable()
```

### Teste 3

```{r}
rf_wflow_3 <- workflow() |> 
  add_recipe(receita_3) |> 
  add_model(modelo_randforest) |> 
  fit(df_total)

rf_pred_3 <- rf_wflow_3 |> 
  predict(df_total |> drop_na()) |> 
  cbind(df_total |> drop_na())

metricas(rf_pred_3, truth = mortes, estimate = .pred) |> kable()
```

### Teste 4

```{r}
rf_wflow_4 <- workflow() |> 
  add_recipe(receita_4) |> 
  add_model(modelo_randforest) |> 
  fit(df_total)

rf_pred_4 <- rf_wflow_4 |> 
  predict(df_total |> drop_na()) |> 
  cbind(df_total |> drop_na())

metricas(rf_pred_4, truth = mortes, estimate = .pred) |> kable()
```

### Teste 5

```{r}
rf_wflow_5 <- workflow() |> 
  add_recipe(receita_5) |> 
  add_model(modelo_randforest) |> 
  fit(df_total)

rf_pred_5 <- rf_wflow_5 |> 
  predict(df_total |> drop_na()) |> 
  cbind(df_total |> drop_na())

metricas(rf_pred_5, truth = mortes, estimate = .pred) |> kable()
```

### Teste 6

```{r}
rf_wflow_6 <- workflow() |> 
  add_recipe(receita_6) |> 
  add_model(modelo_randforest) |> 
  fit(df_total)

rf_pred_6 <- rf_wflow_6 |> 
  predict(df_total |> drop_na()) |> 
  cbind(df_total |> drop_na())

metricas(rf_pred_6, truth = mortes, estimate = .pred) |> kable()
```

### Teste 7

```{r}
rf_wflow_7 <- workflow() |> 
  add_recipe(receita_7) |> 
  add_model(modelo_randforest) |> 
  fit(df_total)

rf_pred_7 <- rf_wflow_7 |> 
  predict(df_total |> drop_na()) |> 
  cbind(df_total |> drop_na())

metricas(rf_pred_7, truth = mortes, estimate = .pred) |> kable()
```

## Seleção de Atributos

```{r}
load(here("data/tabela_total.rda"))

metricas <- metric_set(rmse, mae, rsq)

df_preprocess <- df_total |> 
  select(
    ano,
    mortes,
    veiculos_total,
    qnt_acidentes_fatais,
    condutores,
    qnt_acidentes
  ) |> drop_na()

lm_recipe <- df_preprocess |> recipe(
  mortes ~
    veiculos_total +
    qnt_acidentes_fatais +
    condutores +
    qnt_acidentes
) |> step_normalize(all_numeric_predictors())

lm_reg <- linear_reg() |> set_engine("lm")

lm_wflow <- workflow() |> 
  add_recipe(lm_recipe) |> 
  add_model(lm_reg) |> 
  fit(df_preprocess)

coefs <- tidy(lm_wflow) |> arrange(p.value)

obs2022 <- list(
  "ano" = 2022,
  "qnt_acidentes" = 64547,
  "qnt_acidentes_fatais" = 4662,
  # "qnt_mortos" = 5439,
  # "qnt_feridos" = 72971,
  "condutores" = 79921178,
  "veiculos_total" = 115116532
  # "pib" = 9915317
) |> as.data.frame()

df_preprocess_2022 <- bind_rows(df_preprocess, obs2022)

df_pred <- lm_wflow |> 
  predict(df_preprocess_2022) |> 
  cbind(df_preprocess_2022)

df_pred <- lm_wflow |> 
  predict(df_preprocess_2022, type = "conf_int") |> 
  cbind(df_pred) |> 
  mutate(
    .variation = .pred_upper - .pred_lower 
  )

erros <- metricas(data =df_pred, truth = mortes, estimate = .pred)

ggplot(data = df_pred, aes(x = ano, y = mortes)) +
  geom_point(color = "blue", size = 2, alpha = 0.5) +
  geom_point(aes(y = .pred), color = "red", alpha = 5, size = 2) +
  geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper),
                width = .25,
                color = "red",
                alpha = 0.5,
                size = 1) +
  geom_ribbon(aes(ymin = .pred_lower, ymax = .pred_upper),
              alpha = 0.1)
```

Variação com acidentes, fatais e feridos: 5533.683 
Variação com acidentes e fatais: 4878.459 
Variação com fatais e feridos: 5525.722 
Variação com fatais: 4932.277

```{r}
dados2022 <- list(
  "ano" = 2022,
  "qnt_acidentes" = 64547,
  "qnt_acidentes_fatais" = 4662,
  "condutores" = 79921178,
  "veiculos_total" = 115116532
) |> as.data.frame()

df_2022 <- bind_rows(drop_na(df_total), dados2022)
```

