---
title: "Modelo mensal de análise de regressão"
format: html
editor: source
---

## Importação

```{r}
library(tidyverse)
library(tidymodels)
library(onsvplot)
library(here)
library(roadtrafficdeaths)
library(fleetbr)
library(arrow)
```

```{r}
# função para transformar nome de uf para sigla
brazil_states_acronym <- function(df) {
  brazil_states_df <- data.frame(
    State = c(
      "Acre", "Alagoas", "Amapá", "Amazonas", "Bahia", "Ceará", "Distrito Federal",
      "Espírito Santo", "Goiás", "Maranhão", "Mato Grosso", "Mato Grosso do Sul",
      "Minas Gerais", "Pará", "Paraíba", "Paraná", "Pernambuco", "Piauí",
      "Rio de Janeiro", "Rio Grande do Norte", "Rio Grande do Sul", "Rondônia", "Roraima",
      "Santa Catarina", "São Paulo", "Sergipe", "Tocantins"
    ),
    Acronym = c(
      "AC", "AL", "AP", "AM", "BA", "CE", "DF", "ES", "GO", "MA", "MT", "MS", "MG",
      "PA", "PB", "PR", "PE", "PI", "RJ", "RN", "RS", "RO", "RR", "SC", "SP", "SE", "TO"
    )
  )
  
  for(i in 1:length(df$uf)) {
    for(j in 1:length(brazil_states_df$State)) {
      if(df$uf[i] == brazil_states_df$State[j] & !is.na(df$uf[i])) {
        df$uf[i] <- brazil_states_df$Acronym[j]
      }
    }
  }
  
  return(df)
}
```

```{r}
# frota
df_frota <- fleetbr |> 
  pivot_wider(names_from = modal, values_from = frota) |> 
  mutate(data = ym(paste0(ano, "-", mes)),
         automovel = AUTOMOVEL + CAMINHONETE + CAMIONETA + UTILITARIO,
         motocicleta = MOTOCICLETA + CICLOMOTOR + MOTONETA,
         total = TOTAL) |> 
  summarise(
    .by = c(data, uf),
    automovel = sum(automovel),
    motocicleta = sum(motocicleta),
    veiculos = sum(total)
  )

# prf
url <- "https://github.com/ONSV/prfdata/releases/download/v0.2.0/prf_sinistros.zip"

temp_file <- tempfile()
temp_dir <- tempdir()

download.file(url, temp_file, quiet = T)
unzip(temp_file, exdir = temp_dir)

df_prf <- open_dataset(file.path(temp_dir,"prf_sinistros")) |> 
  mutate(
    mes = month(data_inversa),
    acidentes_fatais = if_else(
      classificacao_acidente == "Com Vítimas Fatais",
      1, 0, missing = 0
    )
  ) |> 
  summarise(
    .by = c(mes, ano, uf),
    acidentes = n(),
    acidentes_fatais = sum(acidentes_fatais),
    feridos = sum(feridos),
    mortes_prf = sum(mortos)
  ) |> 
  arrange(mes, ano) |>
  mutate(data = ym(paste0(ano, "-", mes))) |> 
  select(-c(mes, ano)) |> 
  collect()

unlink(temp_file)

# mortes
df_mortes <- rtdeaths |> 
  mutate(mes_ocorrencia = month(data_ocorrencia)) |>
  count(mes_ocorrencia, ano_ocorrencia, nome_uf_ocor) |> 
  arrange(ano_ocorrencia) |> 
  rename(
    mortes = n,
    mes = mes_ocorrencia,
    ano = ano_ocorrencia,
    uf = nome_uf_ocor
  ) |> 
  brazil_states_acronym() |> 
  mutate(data = ym(paste0(ano, "-", mes))) |> 
  select(c(uf, mortes, data))

dados_mensais_uf <- reduce(
  list(df_frota, df_prf, df_mortes),
  inner_join,
  by = c("data", "uf")
)
```

## Modelo Regional

### Pré-processamento

```{r}
dados_mensais_uf |> 
  mutate(taxa_mortes = (mortes/veiculos)*100000) |> 
  filter(uf %in% c("SP","RJ","MG","ES")) |>
  ggplot(aes(x = data, y = taxa_mortes, color = uf)) +
  geom_line(linewidth = 1)
```

```{r}
dados_mensais_uf |> 
  mutate(taxa_mortes = (mortes/veiculos)*100000) |> 
  filter(uf %in% c("PR","RS","SC")) |>
  ggplot(aes(x = data, y = taxa_mortes, color = uf)) +
  geom_line(linewidth = 1)
```

```{r}
df <- dados_mensais_uf |> 
  mutate(regiao = case_match(
    uf,
    c("SP","MG","RJ","ES") ~ "sudeste",
    c("MT","GO","MS","DF") ~ "centro-oeste",
    c("AL", "BA", "CE", "MA", "PB", "PE", "PI", "RN", "SE") ~ "nordeste",
    c("AC", "AM", "AP", "PA", "RO", "RR", "TO") ~ "norte",
    c("SC","PR","RS") ~ "sul"
  ))

df_nest <- df |> 
  nest(.by = regiao) |> 
  bind_rows(
    list(
      regiao = "brasil",
      data = list(select(df, -regiao))
    )
  )
```

```{r}
df_nest
```

```{r}
df_nest$data
```

```{r}
df_nest$data[[4]] |> 
  mutate(taxa_mortes_veiculos = (mortes/veiculos)*100000) |> 
  ggplot(aes(x = data, y = taxa_mortes_veiculos, color = uf)) +
  geom_point() +
  geom_smooth(method = "loess")+
  scale_color_manual(
    values = c('#e41a1c','#377eb8','#4daf4a','#984ea3',
               '#ff7f00','#ffff33','#a65628','#f781bf','#999999')
  )
```

```{r}
df_nest$data[[4]] |> 
  mutate(taxa_mortes_veiculos = (mortes/veiculos)*100000) |> 
  plotly::plot_ly(x = ~data,
                  y = ~taxa_mortes_veiculos, 
                  color = ~uf, 
                  type = "scatter")
```

### Modelo Regional

```{r}
set.seed(123)

metrix <- metric_set(rmse,mae,rsq)

rec <- df |> 
  select(-regiao) |> 
  recipe(formula = mortes ~ .) |> 
  remove_role(c(mortes_prf, data, uf), old_role = "predictor") |> 
  step_normalize(all_numeric_predictors())

lm <- 
  linear_reg() |> 
  set_engine("glm")
```

```{r}
df_splits <- 
  df_nest |> 
  mutate(
    splits = map(data, initial_split, prop = 0.8),
    training = map(splits, training),
    testing = map(splits, testing),
    model = list(workflow()),
    model = 
      model |> 
      map(add_recipe, rec) |> 
      map(add_model, lm)
  ) 
  

df_splits
```

```{r}
fit_models <- function(df) {
  for(i in seq_along(df$model)) {
    df$fit[[i]] <- fit(df$model[[i]], df$training[[i]])
  }
  return(df)
}

predict_models <- function(df,testing_col) {
  for(i in seq_along(df$model)) {
    df$pred[[i]] <- bind_cols(
      df[[testing_col]][[i]],
      predict(df$fit[[i]],df[[testing_col]][[i]]),
      predict(df$fit[[i]],df[[testing_col]][[i]],type = "conf_int")
    )
  }
  return(df)
}
```

```{r}
preds <- df_splits |> 
  fit_models() |> 
  predict_models("testing") |> 
  mutate(metric = map(pred,metrix,truth = mortes,estimate = .pred))

preds$pred[[6]]
```

```{r}
theme_set(theme_onsv())

preds$pred[[1]] |> 
  summarise(
    .by = data,
    mortes = sum(mortes),
    .pred = sum(.pred),
    .pred_lower = sum(.pred_lower),
    .pred_upper = sum(.pred_upper)
  ) |> 
  ggplot(aes(data, mortes)) +
    geom_ribbon(fill = "grey60", aes(ymin = .pred_lower, ymax = .pred_upper)) +
    geom_line(linewidth = 1, aes(color = "Mortes reais")) +
    geom_line(linewidth = 1, aes(y = .pred, color = "Mortes previstas")) +
    scale_color_manual(values = c("Mortes reais" = onsv_palette$blue,
                                  "Mortes previstas" = onsv_palette$yellow))
```

```{r}
df |> 
  summarise(
    .by = c(data, regiao),
    veiculos = sum(veiculos),
    mortes = sum(mortes)
  ) |> 
  mutate(
    mortes_100k_veiculos = (mortes/veiculos) * 100000
  ) |> 
  ggplot(aes(data,mortes_100k_veiculos,color = regiao)) + 
    geom_line(size = 1) +
    scale_discrete_onsv()
```

```{r}
df |> 
  filter(regiao == "nordeste") |>
  summarise(
    .by = c(data,uf),
    mortes = sum(mortes),
    veiculos = sum(veiculos)
  ) |> 
  mutate(
    mortes_100k_veiculos = (mortes/veiculos) * 100000
  ) |> 
  ggplot(aes(data,mortes_100k_veiculos,color = uf)) +
    geom_smooth() +
    geom_point(size = 0.75) +
    scale_discrete_onsv()
```

```{r}
df |> 
  summarise(
    .by = c(uf,regiao),
    mortes = sum(mortes),
    veiculos = sum(veiculos)
  ) |> 
  mutate(mortos_100k_veiculos = (mortes/veiculos)*100000) |> 
  arrange(desc(mortos_100k_veiculos)) |> 
  ggplot(aes(regiao,mortos_100k_veiculos,fill=regiao)) +
    geom_bar(stat = "identity") +
    scale_discrete_onsv()
```

```{r}
df |> 
  summarise(
    .by = c(uf,regiao),
    mortes = sum(mortes),
    veiculos = sum(veiculos)
  ) |> 
  mutate(mortos_100k_veiculos = (mortes/veiculos)*100000) |> 
  arrange(desc(mortos_100k_veiculos)) |> 
  ggplot(aes(uf,mortos_100k_veiculos,fill=uf)) +
    geom_bar(stat = "identity")
```

```{r}
preds
```

## Modelo Estadual

```{r}
rm(list = (ls()[ls() != "dados_mensais_uf"]))
```

```{r}
df_estadual <- dados_mensais_uf |>
  nest(.by = uf) |>
  bind_rows(list(
    uf = "Brasil",
    data = list(select(dados_mensais_uf,-uf))
  ))

df_estadual
```

```{r}
set.seed(123)

metrix <- metric_set(rmse,mae,rsq)

rec <- dados_mensais_uf |> 
  select(-uf) |> 
  recipe(formula = mortes ~ .) |> 
  remove_role(c(mortes_prf, data), old_role = "predictor") |> 
  step_normalize(all_numeric_predictors())

lm <- 
  linear_reg() |> 
  set_engine("glm")
```

```{r}
fit_models <- function(df) {
  for(i in seq_along(df$model)) {
    df$fit[[i]] <- fit(df$model[[i]], df$training[[i]])
  }
  return(df)
}

predict_models <- function(df,testing_col) {
  for(i in seq_along(df$model)) {
    df$pred[[i]] <- bind_cols(
      df[[testing_col]][[i]],
      predict(df$fit[[i]],df[[testing_col]][[i]]),
      predict(df$fit[[i]],df[[testing_col]][[i]],type = "conf_int")
    )
  }
  return(df)
}
```

```{r}
modelos_estaduais <- 
  df_estadual |> 
  mutate(
    splits = map(data, initial_split, prop = 0.8),
    training = map(splits, training),
    testing = map(splits, testing),
    model = list(workflow()),
    model = 
      model |> 
      map(add_recipe, rec) |> 
      map(add_model, lm)
  ) |> 
  fit_models() |> 
  predict_models("testing")
  
modelos_estaduais
```

```{r}
ts_estaduais <- modelos_estaduais |> 
  predict_models("data")

ts_estaduais$pred |>
  last() |> 
  summarise(
    .by = data,
    mortes = sum(mortes),
    .pred = sum(.pred),
    .pred_lower = sum(.pred_lower),
    .pred_upper = sum(.pred_upper)
  )
```

