---
title: "Modelo de Regressão Linear Múltipla"
format: html
editor: visual
---

## Importando pacotes

```{r}
library(tidyverse)
library(tidymodels)
library(here)
library(knitr)
tidymodels_prefer()
options(scipen = 999)
```

## Importando dados

```{r}
load(here("data","tabela_total.rda"))
```

## Pré-processamento

A função `recipe()` cria uma "receita" parametrizada para os passos de pré-processamento, retornando um objeto *recipe*. Esta receita passa as instruções de cada passo utilizado para tratar o dataset, podendo ser utilizado em outros modelos posteriormente.

```{r}
receita_mortes <- df_total |> 
  recipe(mortes ~ .) |> 
  step_rm(mortos_por_pop, ano) |>
  step_naomit(all_numeric())
  

receita_mortes
```

A função `prep()` retorna um objeto com todos o passos do pré-processamento e estimativas necessárias baseada nos dados fornecidos. Com `retain = TRUE` o objeto armazena o dataset que utilizou para ser calibrado.

```{r}
receita_mortes_prep <- prep(receita_mortes, training = df_total, retain = TRUE)

receita_mortes_prep
```

As funções `bake()` e `juice()` retornam datasets tratados com a receita de formas diferentes.

```{r}
df_mortes_preprocessado <- bake(receita_mortes_prep, new_data = NULL)

df_mortes_preprocessado |> kable()
```

## Estabelecendo métricas

O pacote `yardstick` permite criar um conjunto de métricas para ser utilizadas em um modelo em um mesmo objeto.

```{r}
metricas <- metric_set(rmse, mae, rsq)

metricas
```

## Criando o modelo

Modelo de regressão linear multivariada generalizado

```{r}
modelo_linear <- 
  linear_reg() |> 
  set_engine("glm")

modelo_linear |> translate()
```

Criando um workdflow com a receita e o modelo. O workflow aceita um método fit, onde o modelo pode ser ajustado e o dataframe pré-processado diretamente no workflow.

```{r}
mortes_wflow <- 
  workflow() |> 
  add_recipe(receita_mortes) |> 
  add_model(modelo_linear)

mortes_wflow_ajustado <- mortes_wflow |> fit(df_total)
  
mortes_previsao <- mortes_wflow_ajustado |> predict(df_total) |> rename(mortes_pred = .pred)

mortes_previsto <- cbind(df_total, mortes_previsao)
```

```{r}
mortes_previsto |> 
  ggplot(aes(x = ano)) +
    geom_text(aes(label = ano, y = mortes), nudge_y = 1000, size = 2.5) +
    geom_point(aes(y = mortes)) +
    geom_line(aes(y = mortes)) +
    geom_point(aes(y = mortes_pred), color = "red")
   
```

```{r}
mortes_wflow_ajustado |> tidy()
```

```{r}
metricas(data = mortes_previsto, truth = mortes, estimate = mortes_pred)
```

# Modelo com normalização

```{r}
library(tidyverse)
library(tidymodels)
library(here)
library(knitr)
tidymodels_prefer()
options(scipen = 999)
```

```{r}
load(here("data","tabela_total.rda"))
```

```{r}
metricas <- metric_set(rmse, mae, rsq)

receita_norm <- df_total |> 
  recipe(mortes ~ 
           automovel + 
           motocicleta + 
           veiculos_total + 
           pib + 
           populacao
  ) |>
  step_naomit(all_numeric()) |> 
  step_normalize()

modelo_linear_norm <- 
  linear_reg() |> 
  set_engine("lm")

lm_wflow_norm <- 
  workflow() |> 
  add_recipe(receita_norm) |> 
  add_model(modelo_linear_norm)

lm_wflow_norm_fit <- fit(lm_wflow_norm, df_total)

pred_norm <-
  lm_wflow_norm_fit |> 
  predict(df_total) |> 
  rename(mortes_previstas = .pred)

df_pred_norm <- 
  cbind(df_total, pred_norm)

df_pred_norm |> 
  ggplot(aes(x = ano)) +
    geom_text(aes(label = ano, y = mortes), nudge_y = 1000, size = 2.5) +
    geom_point(aes(y = mortes)) +
    geom_line(aes(y = mortes)) +
    geom_point(aes(y = mortes_previstas), color = "red") +
    geom_smooth(aes(y = mortes_previstas))
```

```{r}
metricas(df_pred_norm, mortes, mortes_previstas)
```

```{r}
lm_wflow_norm_fit |> tidy()
```

```{r}
metricas <- metric_set(rmse, mae, rsq)

receita_norm <- df_total |> 
  recipe(mortos_por_pop ~ 
           automovel + 
           motocicleta + 
           veiculos_total + 
           pib + 
           populacao
  ) |>
  step_naomit(all_numeric()) |> 
  step_normalize()

modelo_linear_norm <- 
  linear_reg() |> 
  set_engine("lm")

lm_wflow_norm <- 
  workflow() |> 
  add_recipe(receita_norm) |> 
  add_model(modelo_linear_norm)

lm_wflow_norm_fit <- fit(lm_wflow_norm, df_total)

pred_norm <-
  lm_wflow_norm_fit |> 
  predict(df_total) |> 
  rename(mortes_previstas = .pred)

df_pred_norm <- 
  cbind(df_total, pred_norm)

df_pred_norm |> 
  ggplot(aes(x = ano)) +
    geom_text(aes(label = ano, y = mortos_por_pop), size = 2.5) +
    geom_point(aes(y = mortos_por_pop)) +
    geom_line(aes(y = mortos_por_pop)) +
    geom_point(aes(y = mortes_previstas), color = "red") +
    geom_smooth(aes(y = mortes_previstas))
```

```{r}
lm_wflow_norm_fit |> tidy()
```

```{r}
metricas(df_pred_norm, mortos_por_pop, mortes_previstas)
```
