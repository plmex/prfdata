---
title: "Análise e Teste de Modelos"
format: 
  html:
    toc: true
    toc-depth: 3
editor: visual
---

Testar diferentes métodos de regressão e técnicas de pré-processamento para melhorar o desempenho do modelo final

## Setup e Importação

```{r}
library(tidyverse)
library(tidymodels)
library(here)
library(knitr)
library(onsvplot)
library(car)
tidymodels_prefer()
options(scipen = 999)
```

```{r}
load(here("data","tabela_total.rda"))
load("metricas_de_erro.rda")
load("pvalores.rda")
```

## Análise das métricas e p-valores

O script calcula RMSE, MAE, R2 e p-valores para modelos lineares simples afim de demonstrar quais variáveis têm maior grau de influência sobre as mortes

```{r}
df_metricas <- rbind(erros_pivot, pvalores) |> 
  group_by(.metric) |> 
  arrange(valor, .by_group = TRUE)

df_metricas |>
  ggplot(aes(x = valor, y = variavel)) +
    facet_wrap(vars(.metric), scales = "free_x") +
    geom_bar(stat = "identity", fill = "lightblue", color = "blue")
```

## Multicolinearidade

```{r}
vif_modelo <- lm(
  mortes ~
    quilometragem_10_bilhoes +
    qnt_mortos +
    qnt_feridos +
    qnt_acidentes +
    populacao +
    pib +
    motocicleta +
    condutores +
    automovel,
  data = df_total |> drop_na()
)

summary(vif_modelo)
```

```{r}
vif(vif_modelo) |> kable()
```

```{r}
vif(vif_modelo) |> 
  barplot(
    main = "Valores VIF",
    horiz = TRUE
  )
abline(v = 1000, lwd = 3, lty = 2)
```

## Modelos

```{r}
modelo_linear_lm <- linear_reg() |> set_engine("lm")

modelo_randforest <- rand_forest(
  mode = "regression",
  mtry = 3,
  trees = 1000
) |> set_engine("ranger")
```

## Metricas

```{r}
metricas <- metric_set(rmse, mae, rsq)
```

## Regressão Linear Multivariada

### Teste 1

```{r}
receita_1 <- df_total |> 
  recipe(
    mortes ~ qnt_acidentes_fatais
  ) |> 
  step_naomit(all_numeric()) |> 
  step_normalize(all_numeric_predictors())

linear_wflow_1 <- workflow() |> 
  add_recipe(receita_1) |> 
  add_model(modelo_linear_lm) |> 
  fit(df_total)

linear_pred_1 <- linear_wflow_1 |> 
  predict(df_total) |> 
  cbind(df_total)

metricas(linear_pred_1, truth = mortes, estimate = .pred) |> kable()
```

### Teste 2

```{r}
receita_2 <- df_total |> 
  recipe(
    mortes ~ qnt_acidentes_fatais + qnt_acidentes
  ) |> 
  step_naomit(all_numeric()) |> 
  step_normalize(all_numeric_predictors())

linear_wflow_2 <- workflow() |> 
  add_recipe(receita_2) |> 
  add_model(modelo_linear_lm) |> 
  fit(df_total)

linear_pred_2 <- linear_wflow_2 |> 
  predict(df_total) |> 
  cbind(df_total)

metricas(linear_pred_2, truth = mortes, estimate = .pred) |> kable()
```

### Teste 3

```{r}
receita_3 <- df_total |> 
  recipe(
    mortes ~ qnt_acidentes_fatais + qnt_acidentes + qnt_feridos
  ) |> 
  step_naomit(all_numeric()) |> 
  step_normalize(all_numeric_predictors())

linear_wflow_3 <- workflow() |> 
  add_recipe(receita_3) |> 
  add_model(modelo_linear_lm) |> 
  fit(df_total)

linear_pred_3 <- linear_wflow_3 |> 
  predict(df_total) |> 
  cbind(df_total)

metricas(linear_pred_3, truth = mortes, estimate = .pred) |> kable()
```

### Teste 4

```{r}
receita_4 <- df_total |> 
  recipe(
    mortes ~ 
      qnt_acidentes_fatais + 
      qnt_acidentes + 
      qnt_feridos +
      condutores
  ) |> 
  step_naomit(all_numeric()) |> 
  step_normalize(all_numeric_predictors())

linear_wflow_4 <- workflow() |> 
  add_recipe(receita_4) |> 
  add_model(modelo_linear_lm) |> 
  fit(df_total)

linear_pred_4 <- linear_wflow_4 |> 
  predict(df_total) |> 
  cbind(df_total)

metricas(linear_pred_4, truth = mortes, estimate = .pred) |> kable()
```

### Teste 5

```{r}
receita_5 <- df_total |> 
  recipe(
    mortes ~ 
      qnt_acidentes_fatais + 
      qnt_acidentes + 
      qnt_feridos +
      condutores +
      populacao
  ) |> 
  step_naomit(all_numeric()) |> 
  step_normalize(all_numeric_predictors())

linear_wflow_5 <- workflow() |> 
  add_recipe(receita_5) |> 
  add_model(modelo_linear_lm) |> 
  fit(df_total)

linear_pred_5 <- linear_wflow_5 |> 
  predict(df_total) |> 
  cbind(df_total)

metricas(linear_pred_5, truth = mortes, estimate = .pred) |> kable()
```

### Teste 6

```{r}
receita_6<- df_total |> 
  recipe(
    mortes ~ 
      qnt_acidentes_fatais + 
      qnt_acidentes + 
      qnt_feridos +
      condutores +
      populacao +
      veiculos_total
  ) |> 
  step_naomit(all_numeric()) |> 
  step_normalize(all_numeric_predictors())

linear_wflow_6 <- workflow() |> 
  add_recipe(receita_6) |> 
  add_model(modelo_linear_lm) |> 
  fit(df_total)

linear_pred_6 <- linear_wflow_6 |> 
  predict(df_total) |> 
  cbind(df_total)

metricas(linear_pred_6, truth = mortes, estimate = .pred) |> kable()
```

### Teste 7 

```{r}
receita_7 <- df_total |> 
  recipe(
    mortes ~ 
      qnt_acidentes_fatais + 
      qnt_acidentes + 
      qnt_feridos +
      condutores +
      populacao +
      veiculos_total +
      pib
  ) |> 
  step_naomit(all_numeric()) |> 
  step_normalize(all_numeric_predictors())

linear_wflow_7 <- workflow() |> 
  add_recipe(receita_7) |> 
  add_model(modelo_linear_lm) |> 
  fit(df_total)

linear_pred_7 <- linear_wflow_7 |> 
  predict(df_total) |> 
  cbind(df_total)

metricas(linear_pred_7, truth = mortes, estimate = .pred) |> kable()
```

## Regressão por Random Forest

### Teste 1

```{r}
rf_wflow_1 <- workflow() |> 
  add_recipe(receita_1) |> 
  add_model(modelo_randforest) |> 
  fit(df_total)

rf_pred_1 <- rf_wflow_1 |> 
  predict(df_total |> drop_na()) |> 
  cbind(df_total |> drop_na())

metricas(rf_pred_1, truth = mortes, estimate = .pred) |> kable()
```

### Teste 2

```{r}
rf_wflow_2 <- workflow() |> 
  add_recipe(receita_2) |> 
  add_model(modelo_randforest) |> 
  fit(df_total)

rf_pred_2 <- rf_wflow_2 |> 
  predict(df_total |> drop_na()) |> 
  cbind(df_total |> drop_na())

metricas(rf_pred_2, truth = mortes, estimate = .pred) |> kable()
```

### Teste 3

```{r}
rf_wflow_3 <- workflow() |> 
  add_recipe(receita_3) |> 
  add_model(modelo_randforest) |> 
  fit(df_total)

rf_pred_3 <- rf_wflow_3 |> 
  predict(df_total |> drop_na()) |> 
  cbind(df_total |> drop_na())

metricas(rf_pred_3, truth = mortes, estimate = .pred) |> kable()
```

### Teste 4

```{r}
rf_wflow_4 <- workflow() |> 
  add_recipe(receita_4) |> 
  add_model(modelo_randforest) |> 
  fit(df_total)

rf_pred_4 <- rf_wflow_4 |> 
  predict(df_total |> drop_na()) |> 
  cbind(df_total |> drop_na())

metricas(rf_pred_4, truth = mortes, estimate = .pred) |> kable()
```

### Teste 5

```{r}
rf_wflow_5 <- workflow() |> 
  add_recipe(receita_5) |> 
  add_model(modelo_randforest) |> 
  fit(df_total)

rf_pred_5 <- rf_wflow_5 |> 
  predict(df_total |> drop_na()) |> 
  cbind(df_total |> drop_na())

metricas(rf_pred_5, truth = mortes, estimate = .pred) |> kable()
```

### Teste 6

```{r}
rf_wflow_6 <- workflow() |> 
  add_recipe(receita_6) |> 
  add_model(modelo_randforest) |> 
  fit(df_total)

rf_pred_6 <- rf_wflow_6 |> 
  predict(df_total |> drop_na()) |> 
  cbind(df_total |> drop_na())

metricas(rf_pred_6, truth = mortes, estimate = .pred) |> kable()
```

### Teste 7

```{r}
rf_wflow_7 <- workflow() |> 
  add_recipe(receita_7) |> 
  add_model(modelo_randforest) |> 
  fit(df_total)

rf_pred_7 <- rf_wflow_7 |> 
  predict(df_total |> drop_na()) |> 
  cbind(df_total |> drop_na())

metricas(rf_pred_7, truth = mortes, estimate = .pred) |> kable()
```